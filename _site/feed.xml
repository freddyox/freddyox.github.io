<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-04-29T19:36:20-04:00</updated><id>/</id><title type="html">R.F. Obrecht</title><subtitle>Projects and Research Interests</subtitle><entry><title type="html">Mona Lisa from Triangles?</title><link href="/blog/mona-lisa-triangles/" rel="alternate" type="text/html" title="Mona Lisa from Triangles?" /><published>2018-04-28T00:00:00-04:00</published><updated>2018-04-28T00:00:00-04:00</updated><id>/blog/mona-lisa-triangles</id><content type="html" xml:base="/blog/mona-lisa-triangles/">&lt;h2 id=&quot;how-to-use-this-theme&quot;&gt;How to Use This Theme&lt;/h2&gt;
&lt;p&gt;Just go ahead and read up on &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;how to install Jekyll&lt;/a&gt;. It’s not too hard I promise!&lt;/p&gt;

&lt;p&gt;Download this repository &lt;a href=&quot;https://github.com/iwiedenm/jekyll-theme-massively&quot;&gt;here&lt;/a&gt; and save it to any folder you want.&lt;/p&gt;

&lt;p&gt;Open a terminal window or a command line and &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to that location.&lt;/p&gt;

&lt;p&gt;Then enter: &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;. You can now access your new Jekyll site from &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt;. Have fun exploring your new site!&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;h3 id=&quot;auto-generating-sitemap&quot;&gt;Auto-Generating Sitemap&lt;/h3&gt;
&lt;p&gt;The sitemap is auto generated! Just simply change the front matter of each site. It looks like so…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sitemap:
    priority: 0.7
    lastmod: 2018-04-28
    changefreq: weekly
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;formspring-integration&quot;&gt;Formspring integration&lt;/h3&gt;
&lt;p&gt;The contact form below each page on the footer actually collects information! Just change your email address in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file!&lt;/p&gt;</content><summary type="html">A hill climbing method to mimick an input image with randomly generated triangles.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/mona_lisa.jpg" /></entry><entry><title type="html">Plinko</title><link href="/blog/plinko/" rel="alternate" type="text/html" title="Plinko" /><published>2017-08-27T00:00:00-04:00</published><updated>2017-08-27T00:00:00-04:00</updated><id>/blog/plinko</id><content type="html" xml:base="/blog/plinko/">&lt;h2 id=&quot;objective&quot;&gt;Objective&lt;/h2&gt;
&lt;p&gt;Plinko is a popular game perhaps due to “The Price is Right”. A contestant
gets up to 5 plinko chips (piece of plastic that resembles a hockey puck),
each of which are worth up to $10,000.
The idea then is quite simple; the contestant chooses an initial starting point at the top
of the board and releases the plinko chip, and hopes to win some money
($0, $100, $500, $1k, $10k are possible outcomes). The fun part, though, is watching
the chip traverse the plinko board. The board is an array of metal pegs,
each row is offset by half a lattice spacing, which forces the chip to change its
trajectory many times. The bin where the chip ends up dictates
how much money is awarded, if any at all, to the contestant. On the show, there are
9 bins and the center bin is the $10k prize. Naively, the odds of obtaining
the big bucks are 1/9, but the odds are initial-condition dependent as we will see.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/plinko/plinko_summary_scaled.png&quot; alt=&quot;&quot; height=&quot;99%&quot; width=&quot;99%&quot; /&gt;
  &lt;figcaption&gt;Fig. 1 - Results of the plinko simulation for a varying number of attempts.
  From top to bottom and left to right, the number of simulations
  is 10&lt;sup&gt;2&lt;/sup&gt;, 10&lt;sup&gt;3&lt;/sup&gt;, 10&lt;sup&gt;4&lt;/sup&gt;, 10&lt;sup&gt;5&lt;/sup&gt;,
  and 10&lt;sup&gt;6&lt;/sup&gt;. Note that the initial condition is the same.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;simulation&quot;&gt;Simulation&lt;/h2&gt;
&lt;p&gt;The simulation setup is summarized by Fig. 1 in which an NxN lattice is generated
where every other row is horizontally offset by half a lattice spacing. The initial
condition is chosen to be roughly the center as it provides the most interesting
results visually. I initially wanted to do the simulation using billiard ball
collisions and forces (momentum and energy conservation, etc.), but
the situation can be dramatically simplified. When a plinko chip encounters a peg,
let's randomly choose a direction to go, left or right, and  propagate this strategy
down the plinko board. If we repeat the game many times then
we've achieved a simple Monte Carlo simulation. The situation
is actually identical to a one-dimensional random walk (or drunken walk)
which follows a binomial distribution. After many steps,
the binomial may be well approximated by a Gaussian, and
the most probable ending spot for the 1D drunkard is exactly where he started.
Therefore, a naive expectation for the plinko simulation is the chip end-bin
distribution to look like a Gaussian with a mean corresponding to the starting
position and a standard deviation that depends on the lattice size or granularity
of the board.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;/images/plinko/ssplinko_nsim_350.jpg&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;
The algorithm to generate a visualization of the plinko simulation uses techniques that I commonly use in my work.
We need an easy way to track the path of a chip; therefore, I need coordinates of all decisions. This can
be efficiently done by first creating a map, or table, that relates any given peg to its closest neighbors.
A simple radius clustering search may be used, but we are only interested in the two closest pegs
&lt;i&gt;below&lt;/i&gt; as they dictate where the chip will move next. Lastly, the path of the chip needs to be traced, where
a path consists of many line segments that connect the left/right decisions throughout the board.
Since we are dealing with coordinates in a lattice,
I Gaussian-smeared the line segment coordinates to avoid an overlap of many paths in addition to
giving the path a more fluid feel. This is what gives the horizontal spread in the observed paths, and explains
why a path occasionally crosses a peg.&lt;/p&gt;

&lt;p&gt;The end-bin plinko chip distribution is plotted within Fig. 2 where the bin size corresponds
to the lattice spacing in the simulation. The left (right) panel throws 100 (10&lt;sup&gt;4&lt;/sup&gt;)
plinko chips, and essentially a perfect Gaussian distribution is observed if the number
of events is large as expected.
Therefore, the ideal starting-position to get the 10k per chip
on &quot;The Price is Right&quot; is the bin that aligns with the 10k bin. Note that I actually did
watch a guy hit the 10k bin 3 out of 5 times which is highly unlikely, see 
&lt;a href=&quot;https://www.youtube.com/watch?v=naUppHrHJpI&quot;&gt;this youtube video&lt;/a&gt;, and won
$31.5k!&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/plinko/plinko_results.png&quot; alt=&quot;&quot; height=&quot;99%&quot; width=&quot;99%&quot; /&gt;
  &lt;figcaption&gt;Fig. 2 - The plinko chip distribution for two simulations
  of 100 (left) and 10&lt;sup&gt;4&lt;/sup&gt; (right) attempts. Dividing each bin by the total number
  of events yields a probability distribution.&lt;/figcaption&gt;
&lt;/figure&gt;</content><summary type="html">Simulating the famous plinko game.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="" /></entry><entry><title type="html">Tree Fractal</title><link href="/blog/tree-fractal/" rel="alternate" type="text/html" title="Tree Fractal" /><published>2016-05-08T00:00:00-04:00</published><updated>2016-05-08T00:00:00-04:00</updated><id>/blog/tree-fractal</id><content type="html" xml:base="/blog/tree-fractal/">&lt;figure&gt;
  &lt;img src=&quot;/images/tree_fractal/fractal_tree_multi.jpg&quot; alt=&quot;&quot; height=&quot;99%&quot; width=&quot;99%&quot; /&gt;
  &lt;figcaption&gt;Fig. 1 - The fractal tree generated with branch angles of 23 (left panel)
  and 60 (right) degrees.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;generating-and-animating-the-fractal&quot;&gt;Generating and Animating the Fractal&lt;/h2&gt;
&lt;p&gt;There are many ways to generate a simple tree fractal. A quick google search gives many variations
and patterns, symmetric and asymmetric, as even small changes to the initial length and/or
angle gives interesting results. I will only describe &lt;i&gt;my&lt;/i&gt; fractal as I am not a
fractal expert; the goal for me was to generate a symmetric tree fractal,
and then to tweak parameters and make an animation.&lt;/p&gt;

&lt;p&gt;The fractal starts with a tree trunk of length &lt;i&gt;l&lt;/i&gt;, and think of
the top of the trunk as a node where we will connect branches. Fractals
are iterative objects, so in this case the trunk is referred to as level zero.
Each time we increment the level, 2 branches will be connected to each node
of the previous level resulting in 2&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt; new branches where &lt;i&gt;n&lt;/i&gt;
represents the level. A branch is just a line defined by two coordinates.
The first level of the fractal, then, generates two branches,
both assigned a length &lt;i&gt;al&lt;/i&gt; where &lt;i&gt;a&lt;/i&gt; is some fraction to be defined by the coder,
with the trunk node as the starting coordinate; the end coordinate depends on the fractal generation
angle. If I choose an angle of say 23 degrees as in Fig. 1, then the first level
branches have end points that are plus/minus 23 degrees with respect to the vertical, or
more generally the directional vector of the trunk (or branch of the previous level).
Level two branches (there are 2&lt;sup&gt;2&lt;/sup&gt;=4)
use level 1 nodes as input where the length is now &lt;i&gt;a&lt;sup&gt;2&lt;/sup&gt;l&lt;/i&gt;, and the end points
are defined &lt;i&gt;relative&lt;/i&gt; to the level 1 branch directional vectors. The process
is iterated to as many levels as one wants, but note that the length of level &lt;i&gt;n&lt;/i&gt;
branches are reduced relative to the trunk by a factor of &lt;i&gt;a&lt;sup&gt;n&lt;/sup&gt;&lt;/i&gt;. For example,
if we choose &lt;i&gt;a&lt;/i&gt;=0.7, then the length of level 7 branches is 0.7&lt;sup&gt;7&lt;/sup&gt;=0.08
or 8% of the trunk's length which quickly becomes difficult to visualize.
Additionally, the tree fractal naturally gives rise to a curling
or rotational effect which yields often unexpected behavior, &lt;i&gt;e.g.&lt;/i&gt; the
right panel of Fig. 1.&lt;/p&gt;

&lt;p&gt;
I used a value of &lt;i&gt;a&lt;/i&gt;=0.65 and &lt;i&gt;n&lt;/i&gt;=15, and incrementally changed the color of branches
as the algorithm progresses to higher branch levels, hence the variations of green
and the red/pink buds. Obviously a great deal of time could be invested tweaking
various parameters and checking the result; the tweaking can be intensified by
considering asymmetric parameters for left/right branch generation at any particular node.
The algorithm can easily be extended to scan over a range of branch generation angles,
say 0 to 360 degrees, and the output can be stringed together to create a .gif using
conventional linux facilities. The results of such a procedure may be seen by Fig. 2.
Fractal analysis can be performed on the output, but I stopped here.
&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/images/tree_fractal/fractal2.gif&quot; alt=&quot;&quot; title=&quot;Tree fractal animation&quot; width=&quot;99%&quot; /&gt;
&lt;figcaption&gt;Fig. 2 - Scanning over branch generation angles of 0 to 360 degrees in 1 degree
increments, and stitching all the images together to create an animation.&lt;/figcaption&gt;
&lt;/figure&gt;</content><summary type="html">Generation and visualization of a Pythagoras tree</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="" /></entry></feed>
